---------   Scopes   ------------
Block scope  - variables declared inside a pair of curly braces cannot be accessed from outside the block.

Function scope  - variables declared inside a function cannot be accessed from outside the function.

Global scope  -  globally variables can be accessed inside a block or function.

Nested function scope  - nested functions have access to variables declared in their own scope as well as variables declared in the outer scope.

How it works: javascript checks if the variable(for example 'c') is deifned in the inner fucntion scope it is and it's value is 30, then does the same for 'b', it checks if 'b' is available in the inner func scope, if not, goes one level up to outer function, and ckecks there, and so on  until reaches the global scope.
exaple for nested scope:
function outer() {
  let b = 20;
  function inner() {
    let c = 30;
    console.log(a, b, c);
  }
  inner();
}
outer();

------------  Closure  ---------------
A closure is the combination of a function bundled together with references to its surrounding state. Closure are created every time a function is created, at function creation time. 
 In other words, a closure gives you access to an outer function's scope from an inner function.

 -----------   Function Currying   ----------
Currying is a process in functional programming in which we transform a function with multiple arguments into a sequence of nesting functions that take one arguments at a time.
function f(a, b, c) is transformed to f(a)(b)(c)
Currying does't call a function, it simply transforms it.
Currying makes composing new functions very easy.


 
---------------- 'this' key word ---------------------
How to determine 'this'? 4 rules.'This' value is determines by how the function is invoked.
1. Implicit binding - most of the time tells what 'this' refers to.

2. Explicit binding  -   In this scenarion we have to explicity specify the context when the function is called, to do so we can use the 'call' method. 'Call' is a build-in method which allows you to specify the context with which a function is invoked.

3. New binding - in Javascript we can invoked the function with the 'new' keyword.
4. Default binding  - when none of the other rules are matched.


// Order of precedence for 'this' keyword 
Important to know, when multiple rules can be applied to figure out 'this' keyword the 'new' binding takes top priority followed by explicit binding  followed by implicit binding the last in default binding.
So 
New binding
Explicit binding
Implicit binding
default binding



-----------------  Prototype  -----------------
If we want to attach a method to every instance of the  'User' function. This is where 'PROTOTYPE' comes in.
In javacsript every function has a property called 'prototype' that points to an object. To determine all our shareable properies we can use this 'prototype' property.

-------------- Prototype Inheritance   --------------------
The Prototypal Inheritance is a feature in javascript used to add methods and properties in objects. It is a method by which an object can inherit the properties and methods of another object. 
we used: 
SuperHero.prototype = Object.create(User.prototype); to inherit getFullName() method. And 
--->
function SuperHero(fName, lName) {
  //this = {}
  User.call(this, fName, lName); //to inherite fName, lName and this from User object.
 ----
} 
--->

----------------  Class keyword --------------
'Class' keyword was introduced in 2015. Class is syntactical sugar over the existing prototypal inheritance. 
Class  -- example shows how we can transform User object create using class keyword.
class User2 {
  constructor(fName, lName) {
    this.firstName = fName;
    this.lastName = lName;
  }
  //all the methods on the prototype object are rewritten as metjods within the class
  sayMyName2() {
    return this.firstName + " " + this.lastName;
  }
}


-------------- Iterables and Iterators  -------------------
before 2015 Javascript had 3 iterating contructs: 
1. for loop,
2. while loop, 
3. do..while loop.

Disadvantages: difficulty in accessing the element & difficult to manage iteration on the data for various types of data structures.

There was a need to iterate over various data structure in a new way that abstracts away the complexity of accessing elements one by one and was at the same time uniform across the different data structure.
Iterables and Iterators make it possible to access data from a collection one at a time which allow us to focus on what to do with the data rather than how to access the data. In the year 2015(ES6 ) two new iteration protocols were introduced which help with iteration, thery are the iterable and iterator protocols.
1. An iterable is a data structure that wants to make its elements accessible to the public. It does so by implementing a method whose key is Symbol.iterator. That method is a factory for iterators.
2. An iterator is a pointer for traversing the elements of a data structure (think cursors in databases).

The following values are iterable:
Arrays
Strings
Maps
Sets
DOM data structures (work in progress)
Plain objects are not iterable.

The for...in loop is used to iterate through the keys of an object. The for...of loop cannot be used to iterate over an object. You can use for...in to iterate over an iterable such arrays and strings but you should avoid using for...in for iterables. The for...of loop was introduced in ES6.
